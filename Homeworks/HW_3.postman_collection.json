{
	"info": {
		"_postman_id": "b25f6a29-2c02-4bf8-ba41-824ef129756e",
		"name": "HW_3",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "/login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonDataRes = pm.response.json();\r",
							"var resp_token = jsonDataRes.token;\r",
							"console.log(\"Token = \" + resp_token)\r",
							"\r",
							"pm.environment.set(\"token\",resp_token);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "oauth2",
					"oauth2": [
						{
							"key": "addTokenTo",
							"value": "header",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "login",
							"value": "Ivan",
							"type": "text"
						},
						{
							"key": "password",
							"value": "qwerty123",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/login",
					"host": [
						"{{url}}"
					],
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "/user_info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1) Статус код 200\r",
							"pm.test(\"Status code is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//2) Проверка структуры json в ответе.\r",
							"var jsonDataRes = pm.response.json();\r",
							"    console.log(\"Respons JSON = \",jsonDataRes);\r",
							"\r",
							"var schema = {\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"person\": {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"u_age\": {\r",
							"          \"type\": \"integer\"\r",
							"        },\r",
							"        \"u_name\": {\r",
							"          \"type\": \"array\",\r",
							"          \"items\": [\r",
							"            {\r",
							"              \"type\": \"string\"\r",
							"            },\r",
							"            {\r",
							"              \"type\": \"integer\"\r",
							"            },\r",
							"            {\r",
							"              \"type\": \"integer\"\r",
							"            }\r",
							"          ]\r",
							"        },\r",
							"        \"u_salary_1_5_year\": {\r",
							"          \"type\": \"integer\"\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"u_age\",\r",
							"        \"u_name\",\r",
							"        \"u_salary_1_5_year\"\r",
							"      ]\r",
							"    },\r",
							"    \"qa_salary_after_12_months\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"qa_salary_after_6_months\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"start_qa_salary\": {\r",
							"      \"type\": \"integer\"\r",
							"    }\r",
							"  },\r",
							"  \"additionalProperties\": false,\r",
							"  \"required\": [\r",
							"    \"person\",\r",
							"    \"qa_salary_after_12_months\",\r",
							"    \"qa_salary_after_6_months\",\r",
							"    \"start_qa_salary\"\r",
							"  ]\r",
							"}\r",
							"var jsonDataRes = pm.response.json()\r",
							"\r",
							"pm.test('Schema is valid', function() {\r",
							"    var correct=tv4.validate(jsonDataRes, schema, true, true)\r",
							"    pm.expect(correct).to.be.true\r",
							"});\r",
							"\r",
							"pm.test(\"Schems is valid\", () => {\r",
							"    pm.expect(tv4.validate(jsonDataRes, schema)).to.be.true;\r",
							"})\r",
							"\r",
							"var Ajv = require('ajv');\r",
							"      ajv = new Ajv({ logger: console, allErrors: true });\r",
							" pm.test('Schema is valid', function() {\r",
							"     pm.expect(ajv.validate(schema, jsonDataRes), JSON.stringify(ajv.errors)).to.be.true;\r",
							" });\r",
							" \r",
							"//3) В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
							"\r",
							"//console.log(\"Respons salary = \",jsonDataRes.person.u_name[1]);\r",
							"\r",
							"pm.test(\"Check json response has start_qa_salary = salary\", () => {\r",
							"    pm.expect(jsonDataRes.start_qa_salary).to.eql(jsonDataRes.person.u_name[1]);\r",
							"});\r",
							"//console.log(\"Salary = \" + jsonDataRes.start_qa_salary);\r",
							"\r",
							"pm.test(\"Check json response has qa_salary_after_6_months = salary*2\", () => {\r",
							"    pm.expect(jsonDataRes.qa_salary_after_6_months).to.eql(jsonDataRes.person.u_name[1]*2);\r",
							"});\r",
							"//console.log(\"Salary * 2 = \" + jsonDataRes.qa_salary_after_6_months);\r",
							"\r",
							"pm.test(\"Check json response has qa_salary_after_12_months = salary*2.9\", () => {\r",
							"    pm.expect(jsonDataRes.qa_salary_after_12_months).to.eql(jsonDataRes.person.u_name[1]*2.9);\r",
							"});\r",
							"//console.log(\"Salary * 2.9 = \" + jsonDataRes.qa_salary_after_12_months);\r",
							"\r",
							"pm.test(\"Check json response has u_salary_1_5_year = salary*4\", () => {\r",
							"    pm.expect(jsonDataRes.person.u_salary_1_5_year).to.eql(jsonDataRes.person.u_name[1]*4);\r",
							"});\r",
							"//console.log(jsonDataRes.person.u_salary_1_5_year);\r",
							"\r",
							"//4) Достать значение из поля 'u_salary_1.5_year' и передать в поле salary запроса http://162.55.220.72:5005/get_test_user\r",
							"var salary_1_5 = jsonDataRes.person.u_salary_1_5_year;\r",
							"//console.log(salary_1_5);\r",
							"pm.environment.set(\"salaru_1_5\", salary_1_5);\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n           \"age\":\"{{age}}\",\r\n        \"salary\":\"{{salary}}\",\r\n          \"name\":\"{{name}}\",\r\n    \"auth_token\":\"{{token}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/user_info",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "/get_test_user",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary_1_5}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/get_test_user",
					"host": [
						"{{url}}"
					],
					"path": [
						"get_test_user"
					]
				}
			},
			"response": []
		},
		{
			"name": "/new_data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1) Статус код 200\r",
							"\r",
							"pm.test(\"Status code is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 2) Проверка структуры json в ответе.\r",
							"\r",
							" var schema = {\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"age\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"name\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"salary\": {\r",
							"      \"type\": \"array\",\r",
							"      \"items\": [\r",
							"        {\r",
							"          \"type\": \"integer\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        }\r",
							"      ]\r",
							"    }\r",
							"  },\r",
							"   \"additionalProperties\": false,\r",
							"  \"required\": [\r",
							"    \"age\",\r",
							"    \"name\",\r",
							"    \"salary\"\r",
							"  ]\r",
							"}\r",
							"var jsonDataRes = pm.response.json()\r",
							"\r",
							"pm.test('Schema is valid', function() {\r",
							"    var correct=tv4.validate(jsonDataRes, schema, true, true)\r",
							"    pm.expect(correct).to.be.true\r",
							"});\r",
							"\r",
							"pm.test(\"Schems is valid\", () => {\r",
							"    pm.expect(tv4.validate(jsonDataRes, schema)).to.be.true;\r",
							"})\r",
							"\r",
							"var Ajv = require('ajv');\r",
							"      ajv = new Ajv({ logger: console, allErrors: true });\r",
							" pm.test('Schema is valid', function() {\r",
							"     pm.expect(ajv.validate(schema, jsonDataRes), JSON.stringify(ajv.errors)).to.be.true;\r",
							" });\r",
							"\r",
							"// 3) В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
							"\r",
							"var jsonDataReq = request.data;\r",
							"console.log(jsonDataReq.salary);\r",
							"\r",
							"pm.test(\"Check json response has salary[1] = salary*2 \", () => {\r",
							"    pm.expect(+jsonDataRes.salary[1]).to.eql(jsonDataReq.salary * 2);\r",
							"});\r",
							"\r",
							"pm.test(\"Check json response has salary[2] = salary*3 \", () => {\r",
							"    pm.expect(+jsonDataRes.salary[2]).to.eql(jsonDataReq.salary * 3);\r",
							"});\r",
							"\r",
							"// 4) проверить, что 2-й элемент массива salary больше 1-го и 0-го)\r",
							"\r",
							"pm.test(\"Check if an element salary[2] > salary[1]\" , () => {\r",
							"    pm.expect(+jsonDataRes.salary[2]).to.above(+jsonDataRes.salary[1])\r",
							"});\r",
							"\r",
							"pm.test(\"Check if an element salary[2] > salary[0]\", () => {\r",
							"    pm.expect(+jsonDataRes.salary[2]).to.above(+jsonDataRes.salary[0])\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/new_data",
					"host": [
						"{{url}}"
					],
					"path": [
						"new_data"
					]
				}
			},
			"response": []
		},
		{
			"name": "/test_pet_info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1) Статус код 200\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 2) Проверка структуры json в ответе.\r",
							"\r",
							"var schema = {\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"age\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"daily_food\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"daily_sleep\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"name\": {\r",
							"      \"type\": \"string\"\r",
							"    }\r",
							"  },\r",
							"   \"additionalProperties\": false,\r",
							"  \"required\": [\r",
							"    \"age\",\r",
							"    \"daily_food\",\r",
							"    \"daily_sleep\",\r",
							"    \"name\"\r",
							"  ]\r",
							"}\r",
							"\r",
							"var jsonDataRes = pm.response.json()\r",
							"\r",
							"pm.test('Schema is valid', function() {\r",
							"    var correct=tv4.validate(jsonDataRes, schema, true, true)\r",
							"    pm.expect(correct).to.be.true\r",
							"});\r",
							"\r",
							"pm.test(\"Schems is valid\", () => {\r",
							"    pm.expect(tv4.validate(jsonDataRes, schema)).to.be.true;\r",
							"})\r",
							"\r",
							"var Ajv = require('ajv');\r",
							"      ajv = new Ajv({ logger: console, allErrors: true });\r",
							" pm.test('Schema is valid', function() {\r",
							"     pm.expect(ajv.validate(schema, jsonDataRes), JSON.stringify(ajv.errors)).to.be.true;\r",
							" });\r",
							"\r",
							"// 3) В ответе указаны коэффициенты умножения weight, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
							"\r",
							"var jsonDataReq = request.data;\r",
							"\r",
							"pm.test(\"Check daily_food equals weight * 0.012\", () => {\r",
							"    pm.expect(jsonDataRes.daily_food).to.eql(82*0.012);\r",
							"});\r",
							"\r",
							"pm.test(\"Check daily_food equals weight * 2.5\", () => {\r",
							"    pm.expect(jsonDataRes.daily_sleep).to.eql(82*2.5);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "weight",
							"value": "82",
							"type": "text"
						},
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/test_pet_info",
					"host": [
						"{{url}}"
					],
					"path": [
						"test_pet_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "/get_test_user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1) Статус код 200\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 2) Проверка структуры json в ответе.\r",
							"\r",
							"var schema = {\r",
							"\r",
							" \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"age\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"family\": {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"children\": {\r",
							"          \"type\": \"array\",\r",
							"          \"items\": [\r",
							"            {\r",
							"              \"type\": \"array\",\r",
							"              \"items\": [\r",
							"                {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                {\r",
							"                  \"type\": \"integer\"\r",
							"                }\r",
							"              ]\r",
							"            },\r",
							"            {\r",
							"              \"type\": \"array\",\r",
							"              \"items\": [\r",
							"                {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                {\r",
							"                  \"type\": \"integer\"\r",
							"                }\r",
							"              ]\r",
							"            }\r",
							"          ]\r",
							"        },\r",
							"        \"u_salary_1_5_year\": {\r",
							"          \"type\": \"integer\"\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"children\",\r",
							"        \"u_salary_1_5_year\"\r",
							"      ]\r",
							"    },\r",
							"    \"name\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"salary\": {\r",
							"      \"type\": \"integer\"\r",
							"    }\r",
							"  },\r",
							"     \"additionalProperties\": false,\r",
							"  \"required\": [\r",
							"    \"age\",\r",
							"    \"family\",\r",
							"    \"name\",\r",
							"    \"salary\"\r",
							"  ]\r",
							"}\r",
							"var jsonDataRes = pm.response.json()\r",
							"\r",
							"pm.test('Schema is valid', function() {\r",
							"pm.response.to.have.jsonSchema(schema)\r",
							"});\r",
							"\r",
							"\r",
							"pm.test('Schema is valid', function() {\r",
							"    var correct=tv4.validate(jsonDataRes, schema, true, true)\r",
							"    pm.expect(correct).to.be.true\r",
							"});\r",
							"\r",
							"pm.test(\"Schems is valid\", () => {\r",
							"    pm.expect(tv4.validate(jsonDataRes, schema)).to.be.true;\r",
							"})\r",
							"\r",
							"var Ajv = require('ajv');\r",
							"      ajv = new Ajv({ logger: console, allErrors: true });\r",
							" pm.test('Schema is valid', function() {\r",
							"     pm.expect(ajv.validate(schema, jsonDataRes), JSON.stringify(ajv.errors)).to.be.true;\r",
							" });\r",
							"\r",
							"\r",
							"// 3) Проверить что занчение поля name = значению переменной name из окружения\r",
							"var jsonDataRes = pm.response.json()\r",
							"pm.environment.get(\"name\");\r",
							"\r",
							"pm.test(\"Check that the name in the response = the name from the environment\", () => {\r",
							"    pm.expect(jsonDataRes.name).to.eql(pm.environment.get(\"name\"))\r",
							"});\r",
							"\r",
							"// 4) Проверить что занчение поля age в ответе соответсвует отправленному в запросе значению поля age\r",
							"var jsonDataReq = request.data;\r",
							"\r",
							"pm.test(\"Check that the age in the response = the age from the request\", () => {\r",
							"    pm.expect(jsonDataRes.age).to.eql(jsonDataReq.age)\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/get_test_user",
					"host": [
						"{{url}}"
					],
					"path": [
						"get_test_user"
					]
				}
			},
			"response": []
		},
		{
			"name": "/currency",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1) Можете взять любой объект из присланного списка, используйте js random.\r",
							"// В объекте возьмите Cur_ID и передать через окружение в следующий запрос.\r",
							"\r",
							"var jsonDataRes = pm.response.json();\r",
							"console.log(jsonDataRes);\r",
							"const values = Object.values(jsonDataRes);\r",
							"const values_length = values.length\r",
							"console.log(values_length)\r",
							"const randomCur_ID = values[parseInt(Math.random() * values.length)];\r",
							"console.log(randomCur_ID)\r",
							"pm.environment.set(\"Cur_ID\", randomCur_ID.Cur_ID);\r",
							"\r",
							"\r",
							"// var jsonDataRes = pm.response.json()\r",
							"// var randomCur_ID = _.random(jsonDataRes.length)\r",
							"// pm.environment.set(\"Cur_ID\",jsonDataRes[randomCur_ID].Cur_ID);\r",
							"// console.log(jsonDataRes[randomCur_ID])"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/currency",
					"host": [
						"{{url}}"
					],
					"path": [
						"currency"
					]
				}
			},
			"response": []
		},
		{
			"name": "/curr_byn",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1) Статус код 200\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 2) Проверка структуры json в ответе.\r",
							"\r",
							"var schema = {\r",
							"     \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"Cur_Abbreviation\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"Cur_ID\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"Cur_Name\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"Cur_OfficialRate\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"Cur_Scale\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"Date\": {\r",
							"      \"type\": \"string\"\r",
							"    }\r",
							"  },\r",
							"  \"additionalProperties\": false,\r",
							"  \"required\": [\r",
							"    \"Cur_Abbreviation\",\r",
							"    \"Cur_ID\",\r",
							"    \"Cur_Name\",\r",
							"    \"Cur_OfficialRate\",\r",
							"    \"Cur_Scale\",\r",
							"    \"Date\"\r",
							"  ]\r",
							"}\r",
							"\r",
							"var jsonDataRes = pm.response.json()\r",
							"\r",
							"pm.test('Schema is valid', function() {\r",
							"    var correct=tv4.validate(jsonDataRes, schema, true, true)\r",
							"    pm.expect(correct).to.be.true\r",
							"});\r",
							"\r",
							"pm.test(\"Schems is valid\", () => {\r",
							"    pm.expect(tv4.validate(jsonDataRes, schema)).to.be.true;\r",
							"})\r",
							"\r",
							"var Ajv = require('ajv');\r",
							"      ajv = new Ajv({ logger: console, allErrors: true });\r",
							" pm.test('Schema is valid', function() {\r",
							"     pm.expect(ajv.validate(schema, jsonDataRes), JSON.stringify(ajv.errors)).to.be.true;\r",
							" });\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						},
						{
							"key": "curr_code",
							"value": "{{Cur_ID}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/curr_byn",
					"host": [
						"{{url}}"
					],
					"path": [
						"curr_byn"
					]
				}
			},
			"response": []
		},
		{
			"name": "/currency***",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// ***\r",
							"// 1) получить список валют\r",
							"// 2) итерировать список валют\r",
							"// 3) в каждой итерации отправлять запрос на сервер для получения курса каждой валюты\r",
							"// 4) если возвращается 500 код, переходим к следующей итреации\r",
							"// 5) если получаем 200 код, проверяем response json на наличие поля \"Cur_OfficialRate\"\r",
							"// 6) если поле есть, пишем в консоль инфу про фалюту в виде response\r",
							"// {\r",
							"//     \"Cur_Abbreviation\": str\r",
							"//     \"Cur_ID\": int,\r",
							"//     \"Cur_Name\": str,\r",
							"//     \"Cur_OfficialRate\": float,\r",
							"//     \"Cur_Scale\": int,\r",
							"//     \"Date\": str\r",
							"// }\r",
							"// 7) переходим к следующей итерации\r",
							"\r",
							"\r",
							"var jsonDataRes = pm.response.json();\r",
							"var jsonDataLength = jsonDataRes.length\r",
							"var token = pm.environment.get(\"token\");\r",
							"//console.log(token)\r",
							"//console.log(jsonDatalength)\r",
							"for ( var i = 0; i < jsonDataLength; i++){\r",
							"var CurID = jsonDataRes[i].Cur_ID;\r",
							"const regRequest = {\r",
							"        'method': 'POST',\r",
							"        'url': 'http://162.55.220.72:5005/curr_byn',\r",
							"        'body': {\r",
							"            'mode': 'formdata',\r",
							"            'formdata': [\r",
							"                {'key': 'auth_token', 'value': token},\r",
							"                {'key': 'curr_code', 'value': CurID}\r",
							"            ]\r",
							"        }\r",
							"    };\r",
							"\r",
							"    pm.sendRequest(regRequest,(error,response) => {\r",
							"    if  (response.code == 200){\r",
							"        var jsonDataRes = response.json();\r",
							"        if ( pm.expect(jsonDataRes).to.have.any.keys(\"Cur_OfficialRate\")){\r",
							"            console.log(jsonDataRes)\r",
							"            };\r",
							"    }\r",
							"    });\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/currency",
					"host": [
						"{{url}}"
					],
					"path": [
						"currency"
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}